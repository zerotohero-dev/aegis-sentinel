#
# .-'_.---._'-.
# ||####|(__)||   Protect your secrets, protect your business.
#   \\()|##//       Secure your sensitive data with Aegis.
#    \\ |#//                  <aegis.z2h.dev>
#     .\_/.
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: aegis-sentinel
  namespace: aegis-system
  labels:
    app.kubernetes.io/name: aegis-sentinel
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: aegis-sentinel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aegis-sentinel
        app.kubernetes.io/part-of: aegis-system
    spec:
      serviceAccountName: aegis-sentinel
      containers:
      - name: main
        image: z2hdev/aegis-sentinel:0.12.10
        volumeMounts:
        - name: spire-agent-socket
          mountPath: /spire-agent-socket
          readOnly: true
        #
        # env:
        #
        # You can configure Aegis Sentinel by providing environment variables.
        #
        # See https://aegis.z2h.dev/docs/configuration for more information about
        # these environment variables.
        #
        # When you don’t explicitly provide env vars here, Aegis Safe will assume
        # the default values outlined in the given link above.
        #
        env:
        - name: SPIFFE_ENDPOINT_SOCKET
          value: "unix:///spire-agent-socket/agent.sock"
        - name: AEGIS_SENTINEL_SVID_PREFIX
          value: "spiffe://aegis.z2h.dev/workload/aegis-sentinel/ns/aegis-system/sa/aegis-sentinel/n/"
        - name: AEGIS_SAFE_SVID_PREFIX
          value: "spiffe://aegis.z2h.dev/workload/aegis-safe/ns/aegis-system/sa/aegis-safe/n/"
        - name: AEGIS_PROBE_LIVENESS_PORT
          value: ":8081"
        livenessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 1
          periodSeconds: 10
        #
        # Resource allocation will highly-depend on the system.
        # Benchmark your deployment, monitor your resource utilization, and
        # adjust these values accordingly.
        # resources:
        #  requests:
        #    memory: "128Mi"
        #    cpu: "250m"
        #  limits:
        #    memory: "128Mi"
        #    # We recommend “NOT” setting a CPU limit.
        #    # As long as you have configured your CPU “requests” correctly,
        #    # everything would work fine.
        #
      volumes:
      # Using SPIFFE CSI Driver to bind to the SPIRE Agent Socket
      # ref: https://github.com/spiffe/spiffe-csi
      - name: spire-agent-socket
        csi:
          driver: "csi.spiffe.io"
          readOnly: true
